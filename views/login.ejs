<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/css/reset.css" >
    <link rel="stylesheet" href="/css/index.css" />
    <title>유니온 관리자 페이지</title>
    <style>
      .hidden {
        display: none;
      }
    </style>
  </head>
  <link rel="icon" href="data:;base64,iVBORw0KGgo=">
  <body>
    <!-- <img src="http://127.0.0.1:4000/img/sample_img.png" alt="description" /> -->
    <div class="big_container">
      <div class="title">유니온 관리자 페이지</div>
      <div class="login-container">
        <form id="loginForm" class="loginForm">
          <input type="text" id="studentId" placeholder="인천대 포털 학번" required />
          <input
            type="password"
            id="password"
            placeholder="포털 비밀번호"
            required
          />
          <button type="submit">로그인</button>
        </form>
      </div>
      <div class="info_box box">
        <div class="student text_box"></div>
        <button onclick="logout()" class="logout hidden">로그아웃</button>
      </div>
      <div class="assigned_booth text_box hidden">등록된 부스</div>
      <div class="booth_box box hidden">
        <div class="booth_list text_box"></div>
        <form action="/manage/edit" method="GET">
            <button class="edit">수정</button>
        </form>
      </div>

    </div>

    
  </body>
</html>
<script>

// Auth 헤더를 포함한 fetch 함수
function fetchWithAuth(url, options = {}) {
  const authToken = localStorage.getItem('authToken');
  const defaultOptions = {
    headers: {
      Authorization: `Bearer ${authToken}`,
      "Content-Type": "application/json",
    }
  };

  const finalOptions = Object.assign({}, defaultOptions, options);
  finalOptions.headers = Object.assign({}, defaultOptions.headers, options.headers);

  return fetch(url, finalOptions)
    .then(response => {
      if (!response.ok) {
        return Promise.reject(response);
      }
      return response.json(); // 서버로부터 받은 JSON 응답을 파싱
    });
}

// 즉시 실행 함수 -> user/me API 호출 -> 자동로그인
(function() {
  const authToken = localStorage.getItem('authToken');
  if (authToken) {
    fetchWithAuth("http://localhost:4000/user/me")
      .then((data) => {
        console.log('Success:', data);
        document.getElementsByClassName("student")[0].innerText = `${data.name} 님`;
        return fetchWithAuth("http://localhost:4000/manage/list");
      })
      .then(data => {
        console.log('Success:', data);
        updateDOMAfterLogin(data);
      })
      .catch(error => {
        console.error('Error:', error);
      });
  }
})();

// 로그인 폼 제출 이벤트
document.getElementById("loginForm").addEventListener("submit", function (e) {
  e.preventDefault();
  var studentId = document.getElementById("studentId").value;
  var password = document.getElementById("password").value;

  fetch("http://localhost:4000/user/lms", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      studentId: studentId,
      password: password,
    }),
  })
  .then((response) => response.json())
  .then((data) => {
    if (data.accessToken) {
      localStorage.setItem('authToken', data.accessToken);
      document.getElementsByClassName("student")[0].innerText = `${data.studentId} 님`;
      return fetchWithAuth("http://localhost:4000/manage/list");
    } else {
      alert(data.message || "로그인 실패");
    }
  })
  .then(data => {
    if (data) {
      console.log('Success:', data);
      updateDOMAfterLogin(data);
    }
  })
  .catch((error) => console.error("Error:", error));
});

function updateDOMAfterLogin(data) {
  document.getElementsByClassName("logout")[0].classList.remove("hidden");
  document.getElementsByClassName("assigned_booth")[0].classList.remove("hidden");
  document.getElementsByClassName("booth_box")[0].classList.remove("hidden");
  document.getElementsByClassName('login-container')[0].classList.add("hidden");
  document.getElementsByClassName("booth_list")[0].innerText = `${data.booth.name} | ${data.booth.department}`;
}

// 로그아웃 함수
function logout() {
  fetchWithAuth("http://localhost:4000/user/logout")
    .then((data) => {
      if (data.success) {
        localStorage.removeItem('authToken');
        window.location.href = 'http://localhost:4000/manage/';
      } else {
        alert(data.message || "로그아웃 실패");
      }
    })
    .catch((error) => console.error("Error:", error));
}
</script>
